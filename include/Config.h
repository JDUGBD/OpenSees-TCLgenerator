#ifndef CONFIG_H
#define CONFIG_H

#include <sys/stat.h>

#include <cstdio>
#include <filesystem>  // C++17 for create_directories
#include <fstream>
#include <iostream>
#include <string>

#ifdef _WIN32
#include <direct.h>

#include <cstdlib>
#else
#include <unistd.h>
#endif

struct Config {
  std::string outFolder = "out/";

  // Primary files
  std::string mainFile = outFolder + "Main.tcl";
  std::string nodesFile;
  std::string elementsFile;
  std::string materialsFile;
  std::string bcFile;
  std::string recorderFile;
  std::string timeSeriesFile;
  std::string loadPatternFile;
  std::string analysisFile;

  std::size_t ndm = 0;  // spatial dimensions
  std::size_t ndf = 0;  // DOF per node
  bool scientific = true;
  int precision = 5;

  std::size_t eleTag = 0;

  // Constructor: automatically create folder, initialize files, and write
  // Main.tcl
  Config() {
    createFolder();

    // Initialize full paths
    nodesFile = outFolder + "Nodes.tcl";
    elementsFile = outFolder + "Elements.tcl";
    materialsFile = outFolder + "Materials.tcl";
    bcFile = outFolder + "BoundaryConditions.tcl";
    recorderFile = outFolder + "Recorders.tcl";
    timeSeriesFile = outFolder + "TimeSeries.tcl";
    analysisFile = outFolder + "Analysis.tcl";
    loadPatternFile = outFolder + "LoadPatterns.tcl";

    // Delete and recreate all files
    createOrTruncate(mainFile);
    createOrTruncate(nodesFile);
    createOrTruncate(elementsFile);
    createOrTruncate(materialsFile);
    createOrTruncate(bcFile);
    createOrTruncate(recorderFile);
    createOrTruncate(timeSeriesFile);
    createOrTruncate(analysisFile);
    createOrTruncate(loadPatternFile);

    // Write main TCL that sources all files
    writeMainFile();
  }

 private:
  void createFolder() {
    std::error_code ec;
    if (!std::filesystem::create_directories(outFolder, ec) && ec) {
      std::cerr << "Error creating folder: " << outFolder << " ("
                << ec.message() << ")\n";
    }
  }

  void writeMainFile() {
    std::ofstream file(mainFile, std::ios::trunc);
    if (!file) throw std::runtime_error("Cannot open Main.tcl");

    file << "# Main TCL generated by TCLgenerator\n\n";
    file << "wipe\n";
    file << "source \"" << "Nodes.tcl" << "\"\n";
    file << "source \"" << "Materials.tcl" << "\"\n";
    file << "source \"" << "Elements.tcl" << "\"\n";
    file << "source \"" << "BoundaryConditions.tcl" << "\"\n";
    file << "source \"" << "TimeSeries.tcl" << "\"\n";
    file << "source \"" << "LoadPatterns.tcl" << "\"\n";
    file << "source \"" << "Recorders.tcl" << "\"\n";
    file << "source \"" << "Analysis.tcl" << "\"\n";

    file.close();
  }

  void createOrTruncate(const std::string& filename) {
    // Delete file if exists
    if (std::ifstream(filename)) {
      if (std::remove(filename.c_str()) != 0) {
        std::cerr << "Error deleting file: " << filename << std::endl;
      }
    }
    // Create empty file
    std::ofstream(filename, std::ios::trunc);
  }
};

#endif  // CONFIG_H
